[build-system]
requires = ["poetry-core>=1.0.0"]
build-backend = "poetry.core.masonry.api"

[tool.aliases]
build = "poetry build"
release = "poetry publish"
test = "pytest"

[tool.coverage.run]
branch = true
relative_files = true
omit = [
  # runs in container so unseen by coverage
  "src/cpac/helpers/cpac_read_crash.py"
]

[tool.coverage.paths]
source = [
  "src/",
  "*/site-packages/"
]

[tool.coverage.report]
# Regexes for lines to exclude from consideration
exclude_lines = [
  # Standard pragma
  "pragma: no cover",
  # Don't complain about missing debug-only code:
  "def __repr__",
  "if self\\.debug",
  # Don't complain if tests don't hit defensive assertion code:
  "raise AssertionError",
  "raise NotImplementedError",
  # Don't complain if non-runnable code isn't run:
  "if 0:",
  "if __name__ == .__main__.:"
]

[tool.devpi.upload]
no-vcs = "1"
formats = "bdist_wheel"

[tool.poetry]
name = "cpac"
description = "C-PAC Python Package"
authors = ["C-PAC developers <cpac@cnl.childmind.org>"]
license = "MIT"
classifiers = [
  "Development Status :: 3 - Alpha",
  "Intended Audience :: Science/Research",
  "License :: OSI Approved :: MIT License",
  "Natural Language :: English",
  "Operating System :: OS Independent",
  "Programming Language :: Python :: 3",
  "Topic :: Scientific/Engineering :: Bio-Informatics"
]
documentation = "https://fcp-indi.github.io/docs/latest/user/cpac"
readme = "README.rst"
repository = "https://github.com/FCP-INDI/cpac"
version = "1.8.7"

[tool.poetry.dependencies]
python = ">=3.10,<4.0"
docker = ">=4.2.1"
dockerpty = "*"
docker-pycreds = "*"
pandas = [
  {version = ">=0.23.4"},
  {version = "2.2.2", markers = "python_version >= '3.11' and python_version < '4.0' and extra == 'tsconcat'"}
]
poetry = ">=1.8.2"
pyyaml = "*"
rich = "*"
semver = "*"
spython = ">=0.3.0"
tabulate = ">=0.8.6"
tornado = "*"
websocket-client = "*"
alabaster = {version = "*", optional = true}
ba-tsconcat = {version = ">=0.1.2,<0.2.0", optional = true, markers = "python_version >= '3.11' and python_version < '4.0'"}
bids2table = {version = "0.1.0b0", markers = "extra == 'tsconcat'"}
coveralls = {version = "*", optional = true}
elbow = {version = "0.1.1", markers = "extra == 'tsconcat'"}
imagesize = {version = "*", optional = true}
nibabel = {version = "5.2.1", markers = "extra == 'tsconcat'"}
pyarrow = {version = "16.0.0", markers = "extra == 'tsconcat'"}
pytest = {version = "*", optional = true}
pytest-cov = {version = "*", optional = true}
pytest-remotedata = {version = ">=0.3.2", optional = true}
pytest-runner = {version = "*", optional = true}
sphinx = {version = "*", optional = true}

[tool.poetry.extras]
dev = ["coveralls", "pytest", "pytest-remotedata", "pytest-runner", "sphinx"]
gradients = []
testing = ["alabaster", "imagesize", "pytest", "pytest-cov", "pytest-runner", "sphinx"]
tsconcat = ["ba-tsconcat"]

[tool.poetry.scripts]
cpac = "cpac.__main__:run"

[tool.pytest.ini_options]
addopts = "-s"
# --cov cpac --cov-report term-missing -s
# -s
# --verbose
norecursedirs = [
  "dist",
  "build",
  ".tox"
]
testpaths = ["tests"]

[tool.ruff]
extend-exclude = ["docs/conf.py"]
target-version = "py38"

[tool.ruff.lint]
extend-select = ["A", "C4", "D", "G", "I", "ICN", "NPY", "PL", "RET", "RSE", "RUF", "Q", "W"]

[tool.ruff.lint.isort]
combine-as-imports = true
force-sort-within-sections = true
known-first-party = ["cpac"]
no-lines-before = ["collab", "other-first-party", "local-folder"]
order-by-type = false
section-order = ["future", "standard-library", "third-party", "collab", "other-first-party", "first-party", "local-folder"]

[tool.ruff.lint.isort.sections]
"collab" = ["nipype", "spython"]
"other-first-party" = ["ba_timeseries_gradients", "bids2table", "tsconcat"]

[tool.ruff.lint.pydocstyle]
convention = "numpy"

[tool.ruff.lint.pylint]
max-args = 10
max-branches = 50
max-returns = 12
max-statements = 100

[tool.ruff.lint.pyupgrade]
# Until variants Python â‰¥ 3.10
keep-runtime-typing = true
